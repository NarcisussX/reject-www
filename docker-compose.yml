services:
  www:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: www
    restart: unless-stopped
    depends_on:
      - hook
    networks:
      - tw_web
    labels:
      - traefik.enable=true
      - traefik.docker.network=tw_web
      # one service the routers will use
      - traefik.http.services.www.loadbalancer.server.port=80
      # Router: www.reject.app  -> serve SPA
      - "traefik.http.routers.www.rule=Host(`www.reject.app`)"
      - traefik.http.routers.www.entrypoints=websecure
      - traefik.http.routers.www.tls=true
      - traefik.http.routers.www.service=www
      # Router: reject.app (apex) -> serve the SAME SPA
      - "traefik.http.routers.www-apex.rule=Host(`reject.app`)"
      - traefik.http.routers.www-apex.entrypoints=websecure
      - traefik.http.routers.www-apex.tls=true
      - traefik.http.routers.www-apex.service=www
  web:
    depends_on:
      - api

  api:
    image: node:20-alpine
    container_name: reject-api
    working_dir: /app
    command: ["node", "dist/server.js"]
    environment:
      ADMIN_USER: $${ADMIN_USER}
      ADMIN_PASS: $${ADMIN_PASS}
      DISCORD_WEBHOOK_URL: $${DISCORD_WEBHOOK_URL}
      DB_PATH: /data/reject.db
      NODE_ENV: production
    volumes:
      - ./api:/app
      - reject_data:/data
    networks:
      - tw_web
    restart: unless-stopped

  hook:
    build:
      context: ./hook
      dockerfile: Dockerfile
    container_name: hook
    restart: unless-stopped
    environment:
      DISCORD_WEBHOOK: "${DISCORD_WEBHOOK}"
    networks:
      - tw_web
    # no ports and no Traefik labels â†’ internal only

networks:
  tw_web:
    external: true
    name: tw_web

volumes:
  reject_data: